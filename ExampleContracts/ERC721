// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract ERC721 {
 
    string private tokenName;

    string private tokenSymbol;

    mapping(uint256 => address) private owners;

    mapping(address => uint256) private tokenCount;

    mapping(uint256 => address) private tokenApprovals;

    mapping(address => mapping(address => bool)) private operatorApprovals;

    event Approval(address indexed owner, address indexed operator, uint256 indexed tokenId);

    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    constructor(string memory _name, string memory _symbol) {
        tokenName = _name;
        tokenSymbol = _symbol;
    }
  
    function balanceOf(address owner) public view returns (uint256) {
        require(owner != address(0));
        return tokenCount[owner];
    }

    function ownerOf(uint256 tokenId) public view returns (address) {
        require(owners[tokenId] != address(0), "Invalid tokenId");
        return owners[tokenId];
    }

    function name() public view returns (string memory) {
        return tokenName;
    }

    function symbol() public view returns (string memory) {
        return tokenSymbol;
    }

    function approve(address spender, uint256 tokenId) public {
        require(spender != owners[tokenId]);
        require(msg.sender == owners[tokenId] || isApprovedForAll(owners[tokenId], msg.sender));
        tokenApprovals[tokenId] = spender;
        emit Approval(owners[tokenId], spender, tokenId);
    }

    function isApprovedForAll(address owner, address operator) public view returns (bool) {
        return operatorApprovals[owner][operator];
    }
 
    function getApproved(uint256 tokenId) public view returns (address) {
        return tokenApprovals[tokenId];
    }
    
    function setApprovalForAll(address operator, bool approved) public {
        require(operator != msg.sender);
        operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }

  
    function isApprovedOrOwner(address spender, uint256 tokenId) public view returns (bool) {
        return spender == owners[tokenId] || isApprovedForAll(owners[tokenId], spender) || getApproved(tokenId) == spender;
    }

   function transfer(address from, address to, uint256 tokenId) external {
    require(isApprovedOrOwner(msg.sender, tokenId), "Not authorized to transfer");
    require(ownerOf(tokenId) == from, "Token not owned by sender");
    require(to != address(0), "Invalid recipient address");

    delete tokenApprovals[tokenId];
    tokenCount[from]--;
    tokenCount[to]++;
    owners[tokenId] = to;

    emit Transfer(from, to, tokenId);
    }

    function exists(uint256 tokenId) public view returns (bool) {
        return owners[tokenId] != address(0);
    }

    function mint(address to, uint256 tokenId) public {
        require(to != address(0));
        require(!exists(tokenId));

        tokenCount[to]++;
        owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }
  
    function burn(uint256 tokenId) public {
        require(exists(tokenId));

        delete tokenApprovals[tokenId];
        tokenCount[owners[tokenId]]--;
        delete owners[tokenId];

        emit Transfer(owners[tokenId], address(0), tokenId);
    }
}
